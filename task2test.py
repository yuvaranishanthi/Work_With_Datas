# -*- coding: utf-8 -*-
"""Task2test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pKoCEMeTgNZ25OEfr0X-bnj0eIkacuwQ
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn import linear_model
from sklearn import metrics
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error,r2_score

from google.colab import files
uploaded = files.upload()

df=pd.read_csv('Ice Cream.csv')

df.head()

x=df.drop('Revenue',axis=1)
y=df['Revenue']

sns.boxplot(df['Revenue'])

# df['Revenue'] = pd.to_numeric(df['Revenue'], errors='coerce')
# df = df.dropna(subset=['Revenue'])

Q1 = df['Revenue'].quantile(0.25)
Q3 = df['Revenue'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

df = df[(df['Revenue'] >= lower_bound) & (df['Revenue'] <= upper_bound)]


plt.figure(figsize=(6,5))
sns.boxplot(y=df['Revenue'])
plt.show()

sns.boxplot(df['Temperature'])

Q1=df['Temperature'].quantile(0.25)
Q3=df['Temperature'].quantile(0.75)

IQR = Q3-Q1

lower_bound=Q1-1.5*IQR
upper_bound=Q3+1.5*IQR
df = df[(df['Temperature'] >= lower_bound) & (df['Temperature'] <= upper_bound)]
plt.figure(figsize=(6,5))
sns.boxplot(y=df['Temperature'])
plt.show()

print("Missing Values:", df['Revenue'].isnull().sum())
sns.scatterplot(df['Revenue'])
plt.show()

print("Missing Values:", df['Temperature'].isnull().sum())

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
x_train_scaled=scaler.fit_transform(x_train)
x_test_scaled=scaler.transform(x_test)

model = LinearRegression()
model.fit(x_train, y_train)

y_pred = model.predict(x_test)

y_pred = model.predict(x_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared:", r2)

comparison_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(comparison_df.head(10))

